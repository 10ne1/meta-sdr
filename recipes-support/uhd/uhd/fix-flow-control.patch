Return-Path: <moritz.fischer@ettus.com>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on backup01.geekisp.com
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=RCVD_IN_DNSWL_LOW,RDNS_NONE
	autolearn=disabled version=3.3.2
Delivered-To: balister.org-philip@balister.org
Received: (qmail 18860 invoked by uid 1003); 23 Feb 2015 21:36:05 -0000
Received: from unknown (HELO mail-pa0-f50.google.com) (209.85.220.50)
  by mail.geekisp.com with (RC4-SHA encrypted) SMTP; 23 Feb 2015 21:36:05 -0000
Received-SPF: none (mail.geekisp.com: domain at ettus.com does not designate permitted sender hosts)
Received: by padfa1 with SMTP id fa1so30684617pad.2
        for <philip@balister.org>; Mon, 23 Feb 2015 13:36:03 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=vEXz/3x7ClGaeXr4py7XSc4qhro7J2HtHFG7ISNCR9E=;
        b=WoYK/UMteBBkoOiZKyezap8a7798WU1CWa3lIxa0IfHJLYoOJeKiI0V1atERHqYJB9
         FHzwF1I6kWm8mqy9h/gO7pOr7ZGYJOany0CLlAE2g4zOsnk/VTsp9jWecwgC7hlaeLlA
         3Z0DuGAfqLdKn5IzQTG68MPsXcR0LJaQE1vjzxy8MUTgVSrt/+miSPGD9zXwYWzGSded
         DqigpgXjWOIWCr5fvfE1dxJi9IeltGxUO2TqevhOLvVn4udfCpwQpOsT6hzs2NKI9PHD
         /D3uBJ585Jx1r7LljZJTRuWCdPeKAdwsmbdgiF+jvmqjw5+h2C6dX3Rome2FLozC4Z5y
         wLUA==
X-Gm-Message-State: ALoCoQnfl3kFH8btQgozlZKst7SAcuYWplssQljgFdsKwWNwdi0+0ADVUOaFEACX0E6LhrI/ch/i
X-Received: by 10.70.128.15 with SMTP id nk15mr22063508pdb.121.1424727363653;
        Mon, 23 Feb 2015 13:36:03 -0800 (PST)
Return-Path: <moritz.fischer@ettus.com>
Received: from sleipnir.amer.corp.natinst.com (209-234-137-234.static.twtelecom.net. [209.234.137.234])
        by mx.google.com with ESMTPSA id k5sm36610891pdn.45.2015.02.23.13.36.02
        (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 23 Feb 2015 13:36:03 -0800 (PST)
From: Moritz Fischer <moritz.fischer@ettus.com>
To: philip@balister.org
Cc: Moritz Fischer <moritz.fischer@ettus.com>
Subject: [PATCH] e300: fc: This should fix the RX flow control.
Date: Mon, 23 Feb 2015 13:35:49 -0800
Message-Id: <1424727349-25105-2-git-send-email-moritz.fischer@ettus.com>
X-Mailer: git-send-email 1.9.3
In-Reply-To: <1424727349-25105-1-git-send-email-moritz.fischer@ettus.com>
References: <1424727349-25105-1-git-send-email-moritz.fischer@ettus.com>

Two issues:
- Call the correct overflow handler e300_impl vs rx_vita
- Don't lie about buffer sizes and window sizes

Signed-off-by: Moritz Fischer <moritz.fischer@ettus.com>
---
 host/lib/usrp/e300/e300_impl.hpp    |  1 +
 host/lib/usrp/e300/e300_io_impl.cpp | 40 ++++++++++++++++++++++++++++++-------
 2 files changed, 34 insertions(+), 7 deletions(-)

diff --git a/host/lib/usrp/e300/e300_impl.hpp b/host/lib/usrp/e300/e300_impl.hpp
index a4170ee..59e0d59 100644
--- a/host/lib/usrp/e300/e300_impl.hpp
+++ b/host/lib/usrp/e300/e300_impl.hpp
@@ -70,6 +70,7 @@ static std::string E300_SERVER_I2C_PORT    = "21761";
 static std::string E300_SERVER_SENSOR_PORT = "21762";
 
 static const double E300_RX_SW_BUFF_FULLNESS = 0.9;        //Buffer should be half full
+static const size_t E300_RX_FC_REQUEST_FREQ = 32; // per flow ctrl window
 
 // crossbar settings
 static const boost::uint8_t E300_RADIO_DEST_PREFIX_TX   = 0;
diff --git a/host/lib/usrp/e300/e300_io_impl.cpp b/host/lib/usrp/e300/e300_io_impl.cpp
index dcb6f2a..a1d0a8d 100644
--- a/host/lib/usrp/e300/e300_io_impl.cpp
+++ b/host/lib/usrp/e300/e300_io_impl.cpp
@@ -25,6 +25,7 @@
 #include <uhd/transport/bounded_buffer.hpp>
 #include <boost/bind.hpp>
 #include <uhd/utils/tasks.hpp>
+#include <uhd/utils/log.hpp>
 #include <boost/foreach.hpp>
 #include <boost/make_shared.hpp>
 
@@ -226,6 +227,18 @@ void e300_impl::_handle_overflow(
     }
 }
 
+static size_t get_rx_flow_control_window(size_t frame_size, size_t sw_buff_size, double fullness_factor)
+{
+    if (fullness_factor < 0.01 || fullness_factor > 1) {
+        throw uhd::value_error("recv_buff_fullness must be between 0.01 and 1 inclusive (1% to 100%)");
+    }
+
+    size_t window_in_pkts = (static_cast<size_t>(sw_buff_size * fullness_factor) / frame_size);
+    if (window_in_pkts == 0) {
+        throw uhd::value_error("recv_buff_size must be larger than the recv_frame_size.");
+    }
+    return window_in_pkts;
+}
 
 static void handle_rx_flowctrl(
     const boost::uint32_t sid,
@@ -457,25 +470,38 @@ rx_streamer::sptr e300_impl::get_rx_stream(const uhd::stream_args_t &args_)
         id.num_outputs = 1;
         my_streamer->set_converter(id);
 
+        perif.framer->clear();
         perif.framer->set_nsamps_per_packet(spp); //seems to be a good place to set this
         perif.framer->set_sid((data_sid << 16) | (data_sid >> 16));
         perif.framer->setup(args);
         perif.ddc->setup(args);
+
+        // flow control setup
+        const size_t frame_size = data_xports.recv->get_recv_frame_size();
+        const size_t num_frames = data_xports.recv->get_num_recv_frames();
+        const size_t fc_window = get_rx_flow_control_window(
+            frame_size,num_frames * frame_size,
+            E300_RX_SW_BUFF_FULLNESS);
+        const size_t fc_handle_window = std::max<size_t>(1, fc_window / E300_RX_FC_REQUEST_FREQ);
+
+        UHD_LOG << "RX Flow Control Window = " << fc_window
+                << ", RX Flow Control Handler Window = "
+                << fc_handle_window << std::endl;
+
+        perif.framer->configure_flow_control(fc_window);
+        boost::shared_ptr<e300_rx_fc_cache_t> fc_cache(new e300_rx_fc_cache_t());
+
         my_streamer->set_xport_chan_get_buff(stream_i, boost::bind(
             &zero_copy_if::get_recv_buff, data_xports.recv, _1
         ), true /*flush*/);
         my_streamer->set_overflow_handler(stream_i,
-            boost::bind(&rx_vita_core_3000::handle_overflow, perif.framer)
+            boost::bind(&e300_impl::_handle_overflow, this, boost::ref(perif),
+            boost::weak_ptr<uhd::rx_streamer>(my_streamer))
         );
 
-        //setup flow control
-        const size_t fc_window = data_xports.recv->get_num_recv_frames();
-        perif.framer->configure_flow_control(fc_window);
-        boost::shared_ptr<e300_rx_fc_cache_t> fc_cache(new e300_rx_fc_cache_t());
         my_streamer->set_xport_handle_flowctrl(stream_i,
             boost::bind(&handle_rx_flowctrl, data_sid, data_xports.send, fc_cache, _1),
-            static_cast<size_t>(static_cast<double>(fc_window) * E300_RX_SW_BUFF_FULLNESS),
-            true/*init*/);
+            fc_handle_window, true/*init*/);
 
         my_streamer->set_issue_stream_cmd(stream_i,
             boost::bind(&rx_vita_core_3000::issue_stream_command, perif.framer, _1)
-- 
1.9.3

